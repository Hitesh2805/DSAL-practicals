import java.io.*;
import java.util.*;

public class ExternalSort {

    static final int MAX_MEMORY_SIZE = 10;

    public static void main(String[] args) throws IOException {
        mergeSortedFiles("input1.txt", "input2.txt", "sorted_output.txt");
    }

    // Merge two sorted input files into one sorted output file
    public static void mergeSortedFiles(String inputFile1, String inputFile2, String outputFile) throws IOException {
        try (BufferedReader reader1 = new BufferedReader(new FileReader(inputFile1));
             BufferedReader reader2 = new BufferedReader(new FileReader(inputFile2));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {

            String line1 = reader1.readLine(), line2 = reader2.readLine();

            while (line1 != null && line2 != null) {
                writer.write(Integer.parseInt(line1) < Integer.parseInt(line2) ? line1 : line2);
                writer.newLine();
                line1 = Integer.parseInt(line1) < Integer.parseInt(line2) ? reader1.readLine() : line1;
                line2 = Integer.parseInt(line1) < Integer.parseInt(line2) ? line2 : reader2.readLine();
            }

            while (line1 != null) { writer.write(line1); writer.newLine(); line1 = reader1.readLine(); }
            while (line2 != null) { writer.write(line2); writer.newLine(); line2 = reader2.readLine(); }
        }
    }
    
    // Sort chunks in memory and save to a new sorted file
    public static void sortChunks(String inputFile, String outputFile) throws IOException {
        List<Integer> chunkData = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                chunkData.add(Integer.parseInt(line));
                if (chunkData.size() == MAX_MEMORY_SIZE) {
                    writeSortedData(writer, chunkData);
                    chunkData.clear();
                }
            }
            if (!chunkData.isEmpty()) writeSortedData(writer, chunkData);
        }
    }

    private static void writeSortedData(BufferedWriter writer, List<Integer> chunkData) throws IOException {
        Collections.sort(chunkData);
        for (int num : chunkData) {
            writer.write(String.valueOf(num));
            writer.newLine();
        }
    }
}

// OUTPUT

input1.txt:
1
3
5
7
9

input2.txt:
2
4
6
8
10

sorted_output.txt (merged and sorted):
1
2
3
4
5
6
7
8
9
10